PROFESSOR: Jefferson Stachelski 
ENGENHEIRO DE SOFTWARE
ALUNO: https://github.com/AlexsanderSystem/AlexsanderSystem

LINKS : 

TUDO SOBRE MESSAGE BROKERS
https://www.ibm.com/br-pt/cloud/learn/message-brokers


Fundamentos de arquitetura de sistemas

Conceito de Arquitetura em aplicações de internet

OBJETIVOS

1. Tipos De Arquitetura
2. Comparativo entre os tipos de arquitetura
3. Gerenciamento de erros e volume de acesso

REQUISITOS BÁSICOS

- Conhecimento básico sobre protocolo - HTTP e proxy:
Como funciona, oque é proxy.
- Entendimento sobre RestAPI:
Como funciona, oque é RestAPI.
- Conhecimento sobre Docker:
Sistema de Container, nodes, cluster, ter conhecimento básico. (Docker Sworn)
- Saber programar
Básico de programação, prótocolos. 

[FASE-1]

1. Arquitetura de MONOLITO

1º EXEMPLO           
                    [SERVIDOR]
                   [APLICAÇÃO#1]                 [WEBAPP*5]
[BANCO-DE-DADOS] < [APLICAÇÃO#2] < [PROXY-HTTP]  <  
                   [APLICAÇÃO#3]                 [MOBILE*5]

SERVIDOR: Com varias demandas é necessario mais de uma aplicação para suprir altas demandas. 

2. Arquitetura de Microserviços #1


                                CLUSTER

  [SERVIÇO-EXTERNO]     [NODO]
                        [SERVIÇO]                                    [WEBAPP*5]
                                [NODO-2]
  [BANCO-DE-DADOS-1]            [SERVIÇO-2]    <  [PROXY-HTTP]  <
                                          [NODO-3]
  [BANCO-DE-DADOS-2]                      [SERVIÇO-3]                [MOBILE*5]

SERVIÇOS: Com vários serviços é muito cuidado com as complexidades de quantidade de serviços, serviços comunica entre si. 

3. Arquitetura de Microserviços #2


                                CLUSTER

  [SERVIÇO-EXTERNO]     [NODO]
                        [SERVIÇO)]                                    [WEBAPP*5]
                                [NODO-2]
  [MESSAGE-BROKER]              [(SERVIÇO-2)]  <  [PROXY-HTTP]  <
                                          [NODO-3]
  [BANCO-DE-DADOS]                        [(SERVIÇO-3)]                [MOBILE*5]

CORRETOR DE MENSAGEM = "MESSAGE BROKER": trocar de tecnologia sem impactio negativo, pega todas mensagens gerada no passado. 

4. Arquitetura de Microserviços #3


                                CLUSTER

                       [GERENCIADO DE PIPELINE]         <       |       |
                                                                | PROXY |
   [NODO 1]              [NODO 2]                [NODO 3]       | HTTP  |     [WEBAPP*5]
  [SERVIÇO 1]           [SERVIÇO 2]             [SERVIÇO 3]     |       |     
                                                                |       |
                                                                |       |     [MOBILE*5]
   [BANCO-DE-DADOS-1]    [SERVIÇO-EXTERNO]       [BANCO-DE-DADOS-2]

GERENCIADOR DE PIPELINE: Fora do ar não funciona o sistema. Varios passos para chegar a um resultado, Cada serviço depende de cada banco de dados e serviço externo, menos código possível para evitar bugs e usar tecnologia melhor. Segue os passos para gerenciar respostas ou erros, passando por NODO 1, NODO 2, e NODO 3. Os serviços devem ser lidos no ar para evitar erros, saiba arquiteturar que os serviços saibam corrigir e reverter o erro, como pagamento de usuário por exemplo .              
                                                                

 [FASE-2]

PROS E CONTRAS MONOLITO

PRÓS

- Baixa Complexidade:
Apenas um código base é mais facil ser monitorado e várias estâncias.
- Monitoramento simplificado

CONTRAS

- Pilha única:
Apenas um stack, não pode ser inserir nenhuma outra aplicação.
- compartilhamento de recursos:
Modo de checkins maior que o modo financeiro, maior escala de demanda para o sistema com aquele sistema.
- Acoplamento:
Base de código, aclopada no mesmo sistema.
- Mais complexidade e escabilidade:

Sistema mais facil de escalar >>>

PROS E CONTRAS MICROSERVIÇOS # 1

PRÓS

- Stack dinamica:
Posso ter microserviços que trabalham com diversas tec.
- Simples escalabilidade:
Serviço menor mais rapido e simples, consome menos da máquina e de sobrecarregamento do sistema.

CONTRAS

- Acoplamento:
Um serviço fora do ar, quebra todo o sistema.
- Monitoramento mais complexo:
Varias aplicações codeBases separadas! modo complexo de monitoramento.
- Provisionamento mais complexo:
Orquestrador de Container para rodar cada serviço, adicionando mais serviços tornando muitas informações.


PROS E CONTRAS MICROSERVIÇOS # 2

PRÓS

- Stack dinamica:
Posso ter microserviços que trabalham com diversas tec.

- Simples escabilidade:
Serviço menor mais rapido e simples, consome menos da máquina e de sobrecarregamento do sistema.

- Desacoplamento:
Diferentes aplicações e serviços comunincando entre si de uma forma assincrona usando Json, através do MESSAGER BROKER que pode ser EWSqs, kaka ... diferentes. Troca de serviço forma simples.

CONTRAS

- Monitoramento mais complexo:
Comunica-se entre os serviços com cada serviço contendo MESSAGER-BROKER, forma de mensagem assincrona, muda o fluxo, e com vários passos para processar dificuldade visualização, o serviço mais importante desas arquitetura é o MESSAGER-BROKER, nunca pode ficar inutil.

- Provisionamento mais complexo:
Open Source, bom monitoramento, conter boa escalabidade, não pode nenhum erro ou ficar fora do ar.


PROS E CONTRAS MICROSERVIÇOS # 3

PRÓS

- Stack dinamica:
Posso ter microserviços que trabalham com diversas tec.

- Simples escabilidade:
Serviço menor mais rapido e simples, consome menos da máquina e de sobrecarregamento do sistema.

- Desacoplamento:
Diferentes aplicações e serviços comunincando entre si de uma forma assincrona usando Json, através do MESSAGER BROKER que pode ser EWSqs, kaka ... diferentes. Troca de serviço forma simples.

- Menor complexidade:
Saber exatamente o momento que falhou, em que estado estava a informação, mais facil visibilidade da pipeline dessa forma.

CONTRAS

- Provisionamento mais complexo:
Open Source, bom monitoramento, conter boa escalabidade, não pode nenhum erro ou ficar fora do ar.

- Plataforma inteira depende do gerenciador de pipeline:
Em algum momento tiver alguma falha, ou mensagem de erro, e não sabendo gerenciar aquele erro, pode gerar um estado de inconsciência no sistema. Deve seguir X de passos, caso o passo 4 de erro, os passos 3,2,1 devem conter uma forma de consertar o erro.

 [FASE-3]

Gerenciamento de erros e volume de acesso

Gerenciamento de erros


Onde é mais complexo:
- Processos assíncronos (Microserviços#2)
- Pipeline

Solução:
- Dead letter queue
- Filas de re-tentativas






